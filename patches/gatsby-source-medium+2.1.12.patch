diff --git a/node_modules/gatsby-source-medium/gatsby-node.js b/node_modules/gatsby-source-medium/gatsby-node.js
index 3ab21c6..5c3e840 100644
--- a/node_modules/gatsby-source-medium/gatsby-node.js
+++ b/node_modules/gatsby-source-medium/gatsby-node.js
@@ -1,17 +1,25 @@
-"use strict";
+'use strict';
 
 const axios = require(`axios`);
+const fs = require('fs');
 
 const fetch = (username, limit = 100) => {
-  const url = `https://medium.com/${username}/latest?format=json&limit=${limit}`;
-  return axios.get(url);
+  // const url = `https://medium.com/${username}/latest?format=json&limit=${limit}`;
+  return new Promise(resolve =>
+    fs.readFile('medium-posts.txt', 'utf8', (err, data) => {
+      if (err) throw err;
+      resolve({ data });
+    })
+  );
 };
 
 const prefix = `])}while(1);</x>`;
 
 const convertTimestamps = (nextObj, prevObj, prevKey) => {
   if (typeof nextObj === `object`) {
-    Object.keys(nextObj).map(key => convertTimestamps(nextObj[key], nextObj, key));
+    Object.keys(nextObj).map(key =>
+      convertTimestamps(nextObj[key], nextObj, key)
+    );
   } else {
     if (typeof nextObj === `number` && nextObj >> 0 !== nextObj) {
       const date = new Date(nextObj);
@@ -25,17 +33,11 @@ const convertTimestamps = (nextObj, prevObj, prevKey) => {
 
 const strip = payload => payload.replace(prefix, ``);
 
-exports.sourceNodes = async ({
-  actions,
-  createNodeId,
-  createContentDigest
-}, {
-  username,
-  limit
-}) => {
-  const {
-    createNode
-  } = actions;
+exports.sourceNodes = async (
+  { actions, createNodeId, createContentDigest },
+  { username, limit }
+) => {
+  const { createNode } = actions;
 
   try {
     const result = await fetch(username, limit);
@@ -43,7 +45,9 @@ exports.sourceNodes = async ({
     let importableResources = [];
     let posts = {}; // because `posts` needs to be in a scope accessible by `links` below
 
-    const users = Object.keys(json.payload.references.User).map(key => json.payload.references.User[key]);
+    const users = Object.keys(json.payload.references.User).map(
+      key => json.payload.references.User[key]
+    );
     importableResources = importableResources.concat(users);
 
     if (json.payload.posts) {
@@ -52,40 +56,61 @@ exports.sourceNodes = async ({
     }
 
     if (json.payload.references.Post) {
-      posts = Object.keys(json.payload.references.Post).map(key => json.payload.references.Post[key]);
+      posts = Object.keys(json.payload.references.Post).map(
+        key => json.payload.references.Post[key]
+      );
       importableResources = importableResources.concat(posts);
     }
 
     if (json.payload.references.Collection) {
-      const collections = Object.keys(json.payload.references.Collection).map(key => json.payload.references.Collection[key]);
+      const collections = Object.keys(json.payload.references.Collection).map(
+        key => json.payload.references.Collection[key]
+      );
       importableResources = importableResources.concat(collections);
     }
 
-    const resources = Array.prototype.concat(...importableResources).map(resource => {
-      return Object.assign({}, resource, {
-        medium_id: resource.id,
-        id: createNodeId(resource.id ? resource.id : resource.userId)
+    const resources = Array.prototype
+      .concat(...importableResources)
+      .map(resource => {
+        return Object.assign({}, resource, {
+          medium_id: resource.id,
+          id: createNodeId(resource.id ? resource.id : resource.userId),
+        });
       });
-    });
 
-    const getID = node => node ? node.id : null;
+    const getID = node => (node ? node.id : null);
 
     resources.map(resource => {
       convertTimestamps(resource);
       const contentDigest = createContentDigest(resource);
-      const links = resource.type === `Post` ? {
-        author___NODE: getID(resources.find(r => r.userId === resource.creatorId))
-      } : resource.type === `User` ? {
-        posts___NODE: resources.filter(r => r.type === `Post` && r.creatorId === resource.userId).map(r => r.id)
-      } : {};
-      const node = Object.assign(resource, {
-        parent: null,
-        children: [],
-        internal: {
-          type: `Medium${resource.type}`,
-          contentDigest
-        }
-      }, links);
+      const links =
+        resource.type === `Post`
+          ? {
+              author: getID(
+                resources.find(r => r.userId === resource.creatorId)
+              ),
+            }
+          : resource.type === `User`
+          ? {
+              posts: resources
+                .filter(
+                  r => r.type === `Post` && r.creatorId === resource.userId
+                )
+                .map(r => r.id),
+            }
+          : {};
+      const node = Object.assign(
+        resource,
+        {
+          parent: null,
+          children: [],
+          internal: {
+            type: `Medium${resource.type}`,
+            contentDigest,
+          },
+        },
+        links
+      );
       createNode(node);
     });
   } catch (error) {
