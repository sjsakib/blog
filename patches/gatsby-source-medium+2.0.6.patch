diff --git a/node_modules/gatsby-source-medium/gatsby-node.js b/node_modules/gatsby-source-medium/gatsby-node.js
index a87b0b8..ef0446d 100644
--- a/node_modules/gatsby-source-medium/gatsby-node.js
+++ b/node_modules/gatsby-source-medium/gatsby-node.js
@@ -1,23 +1,34 @@
-"use strict";
+'use strict';
 
-var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
+var fs = require('fs');
 
-var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
+var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault');
+
+var _asyncToGenerator2 = _interopRequireDefault(
+  require('@babel/runtime/helpers/asyncToGenerator')
+);
 
 const axios = require(`axios`);
 
 const crypto = require(`crypto`);
 
 const fetch = (username, limit = 100) => {
-  const url = `https://medium.com/${username}/latest?format=json&limit=${limit}`;
-  return axios.get(url);
+  // const url = `https://medium.com/${username}/latest?format=json&limit=${limit}`;
+  return new Promise(resolve =>
+    fs.readFile('medium-posts.txt', 'utf8', (err, data) => {
+      if (err) throw err;
+      resolve({ data });
+    })
+  );
 };
 
 const prefix = `])}while(1);</x>`;
 
 const convertTimestamps = (nextObj, prevObj, prevKey) => {
   if (typeof nextObj === `object`) {
-    Object.keys(nextObj).map(key => convertTimestamps(nextObj[key], nextObj, key));
+    Object.keys(nextObj).map(key =>
+      convertTimestamps(nextObj[key], nextObj, key)
+    );
   } else {
     if (typeof nextObj === `number` && nextObj >> 0 !== nextObj) {
       const date = new Date(nextObj);
@@ -32,75 +43,99 @@ const convertTimestamps = (nextObj, prevObj, prevKey) => {
 const strip = payload => payload.replace(prefix, ``);
 
 exports.sourceNodes =
-/*#__PURE__*/
-function () {
-  var _ref = (0, _asyncToGenerator2.default)(function* ({
-    actions,
-    createNodeId
-  }, {
-    username,
-    limit
-  }) {
-    const createNode = actions.createNode;
-
-    try {
-      const result = yield fetch(username, limit);
-      const json = JSON.parse(strip(result.data));
-      let importableResources = [];
-      let posts = {}; // because `posts` needs to be in a scope accessible by `links` below
-
-      const users = Object.keys(json.payload.references.User).map(key => json.payload.references.User[key]);
-      importableResources = importableResources.concat(users);
-
-      if (json.payload.posts) {
-        posts = json.payload.posts;
-        importableResources = importableResources.concat(posts);
-      }
-
-      if (json.payload.references.Post) {
-        posts = Object.keys(json.payload.references.Post).map(key => json.payload.references.Post[key]);
-        importableResources = importableResources.concat(posts);
-      }
-
-      if (json.payload.references.Collection) {
-        const collections = Object.keys(json.payload.references.Collection).map(key => json.payload.references.Collection[key]);
-        importableResources = importableResources.concat(collections);
-      }
-
-      const resources = Array.prototype.concat(...importableResources).map(resource => {
-        return Object.assign({}, resource, {
-          medium_id: resource.id,
-          id: createNodeId(resource.id ? resource.id : resource.userId)
+  /*#__PURE__*/
+  (function() {
+    var _ref = (0, _asyncToGenerator2.default)(function*(
+      { actions, createNodeId },
+      { username, limit }
+    ) {
+      const createNode = actions.createNode;
+
+      try {
+        const result = yield fetch(username, limit);
+        console.log(result);
+        const json = JSON.parse(strip(result.data));
+        let importableResources = [];
+        let posts = {}; // because `posts` needs to be in a scope accessible by `links` below
+
+        const users = Object.keys(json.payload.references.User).map(
+          key => json.payload.references.User[key]
+        );
+        importableResources = importableResources.concat(users);
+
+        if (json.payload.posts) {
+          posts = json.payload.posts;
+          importableResources = importableResources.concat(posts);
+        }
+
+        if (json.payload.references.Post) {
+          posts = Object.keys(json.payload.references.Post).map(
+            key => json.payload.references.Post[key]
+          );
+          importableResources = importableResources.concat(posts);
+        }
+
+        if (json.payload.references.Collection) {
+          const collections = Object.keys(
+            json.payload.references.Collection
+          ).map(key => json.payload.references.Collection[key]);
+          importableResources = importableResources.concat(collections);
+        }
+
+        const resources = Array.prototype
+          .concat(...importableResources)
+          .map(resource => {
+            return Object.assign({}, resource, {
+              medium_id: resource.id,
+              id: createNodeId(resource.id ? resource.id : resource.userId),
+            });
+          });
+
+        const getID = node => (node ? node.id : null);
+
+        resources.map(resource => {
+          convertTimestamps(resource);
+          const digest = crypto
+            .createHash(`md5`)
+            .update(JSON.stringify(resource))
+            .digest(`hex`);
+          const links =
+            resource.type === `Post`
+              ? {
+                  author___NODE: getID(
+                    resources.find(r => r.userId === resource.creatorId)
+                  ),
+                }
+              : resource.type === `User`
+              ? {
+                  posts___NODE: resources
+                    .filter(
+                      r => r.type === `Post` && r.creatorId === resource.userId
+                    )
+                    .map(r => r.id),
+                }
+              : {};
+          const node = Object.assign(
+            resource,
+            {
+              parent: null,
+              children: [],
+              internal: {
+                type: `Medium${resource.type}`,
+                contentDigest: digest,
+              },
+            },
+            links
+          );
+          createNode(node);
         });
-      });
-
-      const getID = node => node ? node.id : null;
-
-      resources.map(resource => {
-        convertTimestamps(resource);
-        const digest = crypto.createHash(`md5`).update(JSON.stringify(resource)).digest(`hex`);
-        const links = resource.type === `Post` ? {
-          author___NODE: getID(resources.find(r => r.userId === resource.creatorId))
-        } : resource.type === `User` ? {
-          posts___NODE: resources.filter(r => r.type === `Post` && r.creatorId === resource.userId).map(r => r.id)
-        } : {};
-        const node = Object.assign(resource, {
-          parent: null,
-          children: [],
-          internal: {
-            type: `Medium${resource.type}`,
-            contentDigest: digest
-          }
-        }, links);
-        createNode(node);
-      });
-    } catch (error) {
-      console.error(error);
-      process.exit(1);
-    }
-  });
+      } catch (error) {
+        console.error(error);
+        process.exit(1);
+      }
+    });
 
-  return function (_x, _x2) {
-    return _ref.apply(this, arguments);
-  };
-}();
\ No newline at end of file
+    return function(_x, _x2) {
+      return _ref.apply(this, arguments);
+    };
+  })();
